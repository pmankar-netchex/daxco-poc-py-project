import React, { useState, useEffect } from "react";
import {
  Box,
  Button,
  Typography,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  CircularProgress,
  IconButton,
  TextField,
  Select,
  MenuItem,
  Snackbar,
  Alert,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from "@mui/material";
import { useLocation } from "react-router-dom";
import axios from "axios";
import DeleteIcon from '@mui/icons-material/Delete';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import { GROSS_TO_NET_CODES, TYPE_CODES, DEPARTMENT_CODES } from './utils';

const ValidationPage = () => {
  const location = useLocation();
  const [data, setData] = useState(location.state?.webhookResult || null);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState("");
  const [successOpen, setSuccessOpen] = useState(false);
  const [originalRows, setOriginalRows] = useState([]); // Store original format for compatibility
  const [expandedRows, setExpandedRows] = useState({});

  useEffect(() => {
    if (data?.all_valid) {
      setSuccessOpen(true);
    }
  }, [data?.all_valid]);

  // When data loads, transform it to maintain compatibility with the download API
  useEffect(() => {
    if (data?.rows) {
      // If data is already in legacy format (has employee_id instead of Employee), keep it as is
      if (data.rows.length > 0 && 'employee_id' in data.rows[0]) {
        setOriginalRows(data.rows);
      } else {
        // Transform new format to legacy format for API compatibility
        const transformedRows = data.rows.map(row => {
          const employee = row.Employee || {};
          const grossToNetCode = row["Gross to Net Code"] || {};
          const typeCode = row["Type Code"] || {};
          const deptCode = row["Distributed Dept Code"] || {};
          
          // Mark employee as invalid if it doesn't have an exact match or exact_match is empty
          const isEmployeeValid = employee.valid && employee.exact_match && 
            (employee.exact_match.employee_id || employee.exact_match.first_name || employee.exact_match.last_name);
          
          return {
            employee_id: employee.exact_match?.employee_id || "",
            gross_to_net_code: grossToNetCode.exact_match?.net_code || "1",
            type_code: typeCode.exact_match?.net_code || "REG",
            hours_or_amount: row["Hours or Amount"] || 0,
            temporary_rate: row["Temporary Rate"] || "",
            distributed_dept_code: deptCode.exact_match?.dept_code || "",
            employee_id_valid: isEmployeeValid,
            possible_employee_ids: employee.possible_matches?.map(m => m.employee_id) || [],
            first_name: employee.exact_match?.first_name || "",
            last_name: employee.exact_match?.last_name || "",
          };
        });
        setOriginalRows(transformedRows);
      }
    }
  }, [data]);

  // Add effect to auto-select single employee matches
  useEffect(() => {
    if (data?.rows) {
      // Use data.rows instead of rows to avoid dependency issues
      const newRows = [...data.rows];
      let hasChanges = false;

      newRows.forEach((row, rowIdx) => {
        const employeeField = row.Employee || {
          possible_matches: row.possible_employee_ids?.map(id => ({ employee_id: id })) || []
        };

        // If there's exactly one possible match and no employee is selected yet
        if (employeeField.possible_matches?.length === 1 && 
            (!employeeField.exact_match?.employee_id || 
             !employeeField.exact_match?.first_name || 
             !employeeField.exact_match?.last_name)) {
          // Use updateEmployeeId to select the employee
          updateEmployeeId(rowIdx, employeeField.possible_matches[0].employee_id);
          hasChanges = true;
        }
      });

      // No need to update state again, as updateEmployeeId already updates it
      // The hasChanges variable is kept for potential future use
    }
  }, [data?.rows, updateEmployeeId]); // Include updateEmployeeId in the dependency array

  if (!data) {
    return (
      <Box mt={8} textAlign="center">
        <Typography color="error">No validation data found. Please upload a file first.</Typography>
      </Box>
    );
  }

  const { rows = [], all_valid = false } = data;

  // Toggle expansion state for a specific row
  const toggleRowExpansion = (rowIdx) => {
    setExpandedRows(prev => ({
      ...prev,
      [rowIdx]: !prev[rowIdx]
    }));
  };

  // Helper function to check if a field has possible matches
  const hasPossibleMatches = (field) => {
    return field && field.possible_matches && field.possible_matches.length > 0;
  };

  // Helper function to update the data object with new employee ID
  const updateEmployeeId = React.useCallback((rowIndex, employeeId) => {
    setData(prevData => {
      const newRows = [...prevData.rows];
      
      // Find the matching employee in possible matches if available
      let firstName = "";
      let lastName = "";
      let valid = !!employeeId; // Valid if employeeId is not empty
      
      // Handle new format
      if (newRows[rowIndex].Employee && newRows[rowIndex].Employee.possible_matches) {
        const match = newRows[rowIndex].Employee.possible_matches.find(
          m => m.employee_id === employeeId
        );
        
        if (match) {
          firstName = match.first_name || "";
          lastName = match.last_name || "";
        }
        
        // Update both formats
        newRows[rowIndex].Employee = {
          ...newRows[rowIndex].Employee,
          valid: valid,
          exact_match: {
            ...newRows[rowIndex].Employee.exact_match,
            employee_id: employeeId,
            first_name: firstName,
            last_name: lastName
          }
        };
        
        // Also update the original rows for API compatibility
        setOriginalRows(prevOriginalRows => {
          const newOriginalRows = [...prevOriginalRows];
          newOriginalRows[rowIndex] = {
            ...newOriginalRows[rowIndex],
            employee_id: employeeId,
            employee_id_valid: valid,
            first_name: firstName,
            last_name: lastName
          };
          return newOriginalRows;
        });
      } else {
        // Legacy format
        newRows[rowIndex].employee_id = employeeId;
        newRows[rowIndex].employee_id_valid = valid;
        
        // Try to find first/last name from possible matches in originalRows
        setOriginalRows(prevOriginalRows => {
          const newOriginalRows = [...prevOriginalRows];
          if (newOriginalRows[rowIndex].possible_employee_ids) {
            const matchIndex = newOriginalRows[rowIndex].possible_employee_ids.indexOf(employeeId);
            // If we had possible employees in the legacy format, update the names too
            if (matchIndex !== -1) {
              // This is a placeholder as we don't have the names in the legacy format
              // In a real implementation, we would need to look up the names
              firstName = newOriginalRows[rowIndex].first_name || "";
              lastName = newOriginalRows[rowIndex].last_name || "";
            }
          }
          
          newRows[rowIndex].first_name = firstName;
          newRows[rowIndex].last_name = lastName;
          
          newOriginalRows[rowIndex] = {
            ...newOriginalRows[rowIndex],
            employee_id: employeeId,
            employee_id_valid: valid,
            first_name: firstName,
            last_name: lastName
          };
          return newOriginalRows;
        });
      }
      
      return { ...prevData, rows: newRows };
    });
  }, []);

  // Helper function to update the data object with new gross to net code
  const updateGrossToNetCode = (rowIndex, netCode) => {
    const newRows = [...rows];
    
    // Handle new format
    if (newRows[rowIndex]["Gross to Net Code"]) {
      newRows[rowIndex]["Gross to Net Code"] = {
        ...newRows[rowIndex]["Gross to Net Code"],
        valid: true,
        exact_match: {
          net_code: netCode
        }
      };
      
      // Also update the original rows for API compatibility
      const newOriginalRows = [...originalRows];
      newOriginalRows[rowIndex] = {
        ...newOriginalRows[rowIndex],
        gross_to_net_code: netCode
      };
      setOriginalRows(newOriginalRows);
    } else {
      // Legacy format
      newRows[rowIndex].gross_to_net_code = netCode;
    }
    
    setData({ ...data, rows: newRows });
  };

  // Helper function to update the data object with new type code
  const updateTypeCode = (rowIndex, typeCode) => {
    const newRows = [...rows];
    
    // Handle new format
    if (newRows[rowIndex]["Type Code"]) {
      newRows[rowIndex]["Type Code"] = {
        ...newRows[rowIndex]["Type Code"],
        valid: true,
        exact_match: {
          net_code: typeCode
        }
      };
      
      // Also update the original rows for API compatibility
      const newOriginalRows = [...originalRows];
      newOriginalRows[rowIndex] = {
        ...newOriginalRows[rowIndex],
        type_code: typeCode
      };
      setOriginalRows(newOriginalRows);
    } else {
      // Legacy format
      newRows[rowIndex].type_code = typeCode;
    }
    
    setData({ ...data, rows: newRows });
  };

  // Helper function to update the data object with new hours or amount
  const updateHoursOrAmount = (rowIndex, value) => {
    const newRows = [...rows];
    
    // Handle new format
    if ("Hours or Amount" in newRows[rowIndex]) {
      newRows[rowIndex]["Hours or Amount"] = value;
      
      // Also update the original rows for API compatibility
      const newOriginalRows = [...originalRows];
      newOriginalRows[rowIndex] = {
        ...newOriginalRows[rowIndex],
        hours_or_amount: value
      };
      setOriginalRows(newOriginalRows);
    } else {
      // Legacy format
      newRows[rowIndex].hours_or_amount = value;
    }
    
    setData({ ...data, rows: newRows });
  };

  // Helper function to update the data object with new temporary rate
  const updateTemporaryRate = (rowIndex, value) => {
    const newRows = [...rows];
    
    // Handle new format
    if ("Temporary Rate" in newRows[rowIndex]) {
      newRows[rowIndex]["Temporary Rate"] = value;
      
      // Also update the original rows for API compatibility
      const newOriginalRows = [...originalRows];
      newOriginalRows[rowIndex] = {
        ...newOriginalRows[rowIndex],
        temporary_rate: value
      };
      setOriginalRows(newOriginalRows);
    } else {
      // Legacy format
      newRows[rowIndex].temporary_rate = value;
    }
    
    setData({ ...data, rows: newRows });
  };

  // Helper function to update the data object with new department code
  const updateDeptCode = (rowIndex, deptCode) => {
    const newRows = [...rows];
    
    // Handle new format
    if (newRows[rowIndex]["Distributed Dept Code"]) {
      newRows[rowIndex]["Distributed Dept Code"] = {
        ...newRows[rowIndex]["Distributed Dept Code"],
        valid: true,
        exact_match: {
          dept_code: deptCode
        }
      };
      
      // Also update the original rows for API compatibility
      const newOriginalRows = [...originalRows];
      newOriginalRows[rowIndex] = {
        ...newOriginalRows[rowIndex],
        distributed_dept_code: deptCode
      };
      setOriginalRows(newOriginalRows);
    } else {
      // Legacy format
      newRows[rowIndex].distributed_dept_code = deptCode;
    }
    
    setData({ ...data, rows: newRows });
  };

  const handleRevalidate = async () => {
    setSaving(true);
    setError("");
    
    // Pre-validate to check that all employees are selected
    const missingEmployees = originalRows.some(row => 
      !row.employee_id && (!row.first_name || !row.last_name)
    );
    
    if (missingEmployees) {
      setError("Please ensure all rows have an employee selected. Employee cannot be null.");
      setSaving(false);
      return;
    }
    
    try {
      // Get values from localStorage
      const companyId = localStorage.getItem('companyId');
      const integrationType = localStorage.getItem('integration_type') || 'payroll';
      const integrationProvider = localStorage.getItem('integration_provider') || 'Daxco';
      
      // Use originalRows for API compatibility
      const res = await axios.post(
        `/validate?companyId=${companyId}&integration_type=${integrationType}&integration_provider=${integrationProvider}`,
        { rows: originalRows }
      );
      setData(res.data);
    } catch {
      setError("Revalidation failed.");
    }
    setSaving(false);
  };

  const handleDownload = async () => {
    setSaving(true);
    setError("");
    try {
      // Use originalRows for API compatibility
      const res = await axios.post("/download", { rows: originalRows }, { responseType: "blob" });
      const url = window.URL.createObjectURL(new Blob([res.data]));
      const link = document.createElement("a");
      link.href = url;
      link.setAttribute("download", "validated.csv");
      document.body.appendChild(link);
      link.click();
      link.remove();
    } catch {
      setError("Download failed.");
    }
    setSaving(false);
  };

  const handleDeleteRow = (rowIdx) => {
    const newRows = rows.filter((_, idx) => idx !== rowIdx);
    const newOriginalRows = originalRows.filter((_, idx) => idx !== rowIdx);
    setData({ ...data, rows: newRows });
    setOriginalRows(newOriginalRows);
  };

  const isRowValid = (row) => {
    // Check if row is in new format
    if (row.Employee) {
      // Employee data is required - either an ID or both first and last name must be present
      const isEmployeeValid = row.Employee.valid && row.Employee.exact_match && 
        (row.Employee.exact_match.employee_id || 
         (row.Employee.exact_match.first_name && row.Employee.exact_match.last_name));
      
      // Mark row as invalid if employee data is missing
      if (!isEmployeeValid) {
        return false;
      }
      
      return row["Gross to Net Code"].valid && 
             row["Type Code"].valid && 
             row["Distributed Dept Code"].valid;
    }
    // Legacy format
    return row.employee_id_valid !== false && 
           (row.employee_id || (row.first_name && row.last_name)) && 
           row.hours_or_amount_valid !== false;
  };



  return (
    <Box display="flex" flexDirection="column" alignItems="center">
      <Snackbar
        open={successOpen}
        autoHideDuration={3000}
        onClose={() => setSuccessOpen(false)}
        anchorOrigin={{ vertical: 'top', horizontal: 'center' }}
      >
        <Alert onClose={() => setSuccessOpen(false)} severity="success" sx={{ width: '100%' }}>
          All rows are valid! You can now download the file.
        </Alert>
      </Snackbar>
      <Paper sx={{ p: 3, width: '95%', maxWidth: 1200 }}>
        <Typography variant="h5" mb={2}>Validation Results</Typography>
        
        {/* Requirements notice */}
        <Box sx={{ 
          p: 2, 
          mb: 2, 
          backgroundColor: '#fff9c4', 
          borderRadius: 1,
          border: '1px solid #ffeb3b'
        }}>
          <Typography variant="subtitle1" fontWeight="bold">Validation Requirements:</Typography>
          <Typography variant="body2">
            • Each row must have an employee selected with either an Employee ID or First/Last Name
          </Typography>
          <Typography variant="body2">
            • Employee column cannot be empty - this is an invalid case
          </Typography>
          <Typography variant="body2">
            • If there's no exact match, select an employee from the possible matches
          </Typography>
        </Box>
        
        <TableContainer>
          <Table size="small">
            <TableHead>
              <TableRow>
                <TableCell>Employee</TableCell>
                <TableCell>Gross to Net Code</TableCell>
                <TableCell>Type Code</TableCell>
                <TableCell>Hours or Amount</TableCell>
                <TableCell>Temporary Rate</TableCell>
                <TableCell>Distributed Dept Code</TableCell>
                <TableCell>Actions</TableCell>
              </TableRow>
            </TableHead>
            <TableBody>
              {rows.map((row, rowIdx) => {
                const isValid = isRowValid(row);
                const isExpanded = expandedRows[rowIdx] || false;
                
                // Extract fields from either new or legacy format
                const employeeField = row.Employee || { 
                  valid: row.employee_id_valid !== false,
                  exact_match: { 
                    employee_id: row.employee_id,
                    first_name: row.first_name,
                    last_name: row.last_name
                  },
                  possible_matches: row.possible_employee_ids?.map(id => ({ employee_id: id })) || []
                };
                
                // Check if employee field has valid data
                const hasEmployeeData = !!employeeField.exact_match && 
                  (!!employeeField.exact_match.employee_id || 
                  (!!employeeField.exact_match.first_name && !!employeeField.exact_match.last_name));
                
                // Override the valid flag if there's no employee data
                if (!hasEmployeeData) {
                  employeeField.valid = false;
                }
                
                const grossToNetField = row["Gross to Net Code"] || {
                  valid: true,
                  exact_match: { net_code: row.gross_to_net_code || "1" }
                };
                
                const typeCodeField = row["Type Code"] || {
                  valid: true,
                  exact_match: { net_code: row.type_code || "REG" }
                };
                
                const hoursOrAmount = row["Hours or Amount"] !== undefined ? row["Hours or Amount"] : row.hours_or_amount;
                
                const tempRate = row["Temporary Rate"] !== undefined ? row["Temporary Rate"] : row.temporary_rate;
                
                const deptCodeField = row["Distributed Dept Code"] || {
                  valid: true,
                  exact_match: { dept_code: row.distributed_dept_code || DEPARTMENT_CODES[0] }
                };
                
                // Check which fields have possible matches
                const hasEmployeeMatches = hasPossibleMatches(employeeField);
                const hasGrossToNetMatches = hasPossibleMatches(grossToNetField);
                const hasTypeCodeMatches = hasPossibleMatches(typeCodeField);
                const hasDeptCodeMatches = hasPossibleMatches(deptCodeField);
                
                // Determine if any field has possible matches to show expand button
                const showExpandButton = hasEmployeeMatches || hasGrossToNetMatches || hasTypeCodeMatches || hasDeptCodeMatches;
                
                return (
                  <React.Fragment key={rowIdx}>
                    <TableRow 
                      sx={{ 
                        backgroundColor: isValid ? 'inherit' : '#fff8e1',
                        '&:hover': { backgroundColor: '#f5f5f5' },
                        cursor: showExpandButton ? 'pointer' : 'default'
                      }}
                      onClick={showExpandButton ? () => toggleRowExpansion(rowIdx) : undefined}
                    >
                      {/* Employee Column */}
                      <TableCell>
                        <Box display="flex" alignItems="center">
                          {employeeField.valid && employeeField.exact_match && 
                           (employeeField.exact_match?.employee_id || 
                            (employeeField.exact_match?.first_name && employeeField.exact_match?.last_name)) ? (
                            <Typography>
                              {employeeField.exact_match?.employee_id || ""} 
                              {employeeField.exact_match?.first_name && employeeField.exact_match?.last_name && 
                                ` (${employeeField.exact_match?.first_name} ${employeeField.exact_match?.last_name})`}
                            </Typography>
                          ) : (
                            employeeField.possible_matches && employeeField.possible_matches.length > 0 ? (
                              <Select
                                value={employeeField.exact_match?.employee_id || ""}
                                size="small"
                                displayEmpty
                                onChange={(e) => updateEmployeeId(rowIdx, e.target.value)}
                                error={!employeeField.valid}
                                sx={{ width: '100%' }}
                                onClick={(e) => e.stopPropagation()}
                              >
                                <MenuItem value="" disabled>
                                  <em style={{ color: '#d32f2f' }}>Select Employee (Required)</em>
                                </MenuItem>
                                {employeeField.possible_matches.map((match) => (
                                  <MenuItem key={match.employee_id} value={match.employee_id}>
                                    ID: {match.employee_id} {match.first_name && match.last_name && 
                                      `| Name: ${match.first_name} ${match.last_name}${match.home_department ? ` | Dept: ${match.home_department}` : ''}`}
                                  </MenuItem>
                                ))}
                              </Select>
                            ) : (
                              <TextField
                                value={employeeField.exact_match?.employee_id || ""}
                                size="small"
                                onChange={(e) => {
                                  if (/^\d*$/.test(e.target.value)) {
                                    updateEmployeeId(rowIdx, e.target.value === "" ? "" : parseInt(e.target.value, 10));
                                  }
                                }}
                                error={true} // Always error if no employee selected
                                placeholder="Enter Employee ID"
                                fullWidth
                                onClick={(e) => e.stopPropagation()}
                                helperText="Employee ID is required"
                                InputProps={{
                                  endAdornment: (
                                    <Typography variant="caption" color="error" sx={{ ml: 1 }}>
                                      Invalid
                                    </Typography>
                                  ),
                                }}
                              />
                            )
                          )}
                          {hasEmployeeMatches && (
                            <Box ml={1} sx={{ color: 'warning.main' }}>
                              <ExpandMoreIcon 
                                sx={{ 
                                  transform: isExpanded ? 'rotate(180deg)' : 'rotate(0deg)',
                                  transition: 'transform 0.3s'
                                }} 
                              />
                            </Box>
                          )}
                        </Box>
                      </TableCell>
                      
                      {/* Gross to Net Code Column */}
                      <TableCell>
                        <Select
                          value={grossToNetField.exact_match?.net_code || "1"}
                          size="small"
                          onChange={(e) => updateGrossToNetCode(rowIdx, e.target.value)}
                          sx={{ width: '100%' }}
                          onClick={(e) => e.stopPropagation()}
                        >
                          {Object.entries(GROSS_TO_NET_CODES).map(([code, label]) => (
                            <MenuItem key={code} value={code}>{label}</MenuItem>
                          ))}
                        </Select>
                      </TableCell>
                      
                      {/* Type Code Column */}
                      <TableCell>
                        <Select
                          value={typeCodeField.exact_match?.net_code || "REG"}
                          size="small"
                          onChange={(e) => updateTypeCode(rowIdx, e.target.value)}
                          sx={{ width: '100%' }}
                          onClick={(e) => e.stopPropagation()}
                        >
                          {TYPE_CODES.map(code => (
                            <MenuItem key={code} value={code}>{code}</MenuItem>
                          ))}
                        </Select>
                      </TableCell>
                      
                      {/* Hours or Amount Column */}
                      <TableCell>
                        <TextField
                          value={hoursOrAmount || ""}
                          size="small"
                          onChange={(e) => {
                            if (/^\d*\.?\d*$/.test(e.target.value)) {
                              updateHoursOrAmount(rowIdx, e.target.value === "" ? "" : parseFloat(e.target.value));
                            }
                          }}
                          fullWidth
                          onClick={(e) => e.stopPropagation()}
                        />
                      </TableCell>
                      
                      {/* Temporary Rate Column */}
                      <TableCell>
                        <TextField
                          value={tempRate || ""}
                          size="small"
                          onChange={(e) => {
                            if (/^\d*\.?\d*$/.test(e.target.value)) {
                              updateTemporaryRate(rowIdx, e.target.value === "" ? "" : parseFloat(e.target.value));
                            }
                          }}
                          fullWidth
                          onClick={(e) => e.stopPropagation()}
                        />
                      </TableCell>
                      
                      {/* Distributed Dept Code Column */}
                      <TableCell>
                        <Select
                          value={deptCodeField.exact_match?.dept_code || DEPARTMENT_CODES[0]}
                          size="small"
                          displayEmpty
                          onChange={(e) => updateDeptCode(rowIdx, e.target.value)}
                          sx={{ width: '100%' }}
                          onClick={(e) => e.stopPropagation()}
                        >
                          <MenuItem value=""><em>None</em></MenuItem>
                          {DEPARTMENT_CODES.map(code => (
                            <MenuItem key={code} value={code}>{code}</MenuItem>
                          ))}
                        </Select>
                      </TableCell>
                      
                      {/* Actions Column */}
                      <TableCell>
                        <IconButton 
                          color="error" 
                          onClick={(e) => {
                            e.stopPropagation();
                            handleDeleteRow(rowIdx);
                          }}
                        >
                          <DeleteIcon />
                        </IconButton>
                      </TableCell>
                    </TableRow>
                    
                    {/* Expandable Row for showing possible matches */}
                    {isExpanded && (
                      <TableRow>
                        <TableCell colSpan={7} sx={{ py: 0 }}>
                          <Box sx={{ p: 2, backgroundColor: '#f8f9fa' }}>
                            <Typography variant="subtitle2" gutterBottom>Possible Matches</Typography>
                            
                            {hasEmployeeMatches && (
                              <Box sx={{ mb: 2 }}>
                                <Typography variant="body2" fontWeight="bold" color="primary">
                                  Select an Employee from Possible Matches:
                                </Typography>
                                <Typography variant="caption" color="text.secondary" sx={{ display: 'block', mb: 1 }}>
                                  Employee cannot be null - please select a match
                                </Typography>
                                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 1 }}>
                                  {employeeField.possible_matches.map((match, idx) => (
                                    <Box 
                                      key={idx} 
                                      sx={{ 
                                        p: 1, 
                                        border: '1px solid #1976d2', 
                                        borderRadius: 1,
                                        cursor: 'pointer',
                                        backgroundColor: '#f5f9ff',
                                        '&:hover': { backgroundColor: '#e3f2fd' }
                                      }}
                                      onClick={() => updateEmployeeId(rowIdx, match.employee_id)}
                                    >
                                      <Typography variant="body2">
                                        <strong>ID:</strong> {match.employee_id}
                                        {match.first_name && match.last_name && 
                                          <span> <strong>Name:</strong> {match.first_name} {match.last_name}</span>}
                                        {match.home_department && ` (${match.home_department})`}
                                      </Typography>
                                    </Box>
                                  ))}
                                </Box>
                              </Box>
                            )}
                            
                            {/* Add similar sections for other fields with possible matches if needed */}
                          </Box>
                        </TableCell>
                      </TableRow>
                    )}
                  </React.Fragment>
                );
              })}
            </TableBody>
          </Table>
        </TableContainer>

        <Box mt={4}>
          <Accordion>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography>Advanced Details</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography variant="body2" sx={{ mb: 2 }}>This section shows the raw validation data structure.</Typography>
              <Box sx={{ maxHeight: 300, overflow: 'auto', backgroundColor: '#f5f5f5', p: 2, borderRadius: 1 }}>
                <pre>{JSON.stringify(data, null, 2)}</pre>
              </Box>
            </AccordionDetails>
          </Accordion>
        </Box>
        
        <Box mt={2} display="flex" gap={2}>
          {!all_valid ? (
            <Button variant="contained" color="warning" onClick={handleRevalidate} disabled={saving}>
              {saving ? <CircularProgress size={20} /> : "Revalidate"}
            </Button>
          ) : (
            <Button variant="contained" color="success" onClick={handleDownload} disabled={saving}>
              {saving ? <CircularProgress size={20} /> : "Download"}
            </Button>
          )}
        </Box>
        {error && <Typography color="error" mt={2}>{error}</Typography>}
      </Paper>
    </Box>
  );
};

export default ValidationPage;